<?xml version="1.0" encoding="UTF-8"?>
<configuration scan="true" scanPeriod="1000">

    <property name="FILE_NAME" value="base"/>

    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%X{logId}] [%thread] %-5level %logger{96} [%line] - %msg ---[%X] %n</pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>logs/${FILE_NAME}.log</file>
        <append>true</append>
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>logs/${FILE_NAME}.%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <!--超过200MB 重新建立一个文件 -->
            <maxFileSize>200MB</maxFileSize>
            <!--保留15天-->
            <maxHistory>15</maxHistory>
            <!--文件最大5G -->
            <totalSizeCap>1GB</totalSizeCap>
        </rollingPolicy>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <!--格式化输出：%X链路追踪，%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符-->
            <pattern>{"date":"%d{yyyy-MM-dd HH:mm:ss.SSS}", "logId":"%X{logId}", "threadId": "%thread","level": "%-5level","className":"%logger{96}","lineNumber":"%line","msg":"%msg", "MDC":[%X] }%n</pattern>
        </encoder>
    </appender>


    <!-- 性能日志记录器，日期滚动记录 -->
    <!--当一个记录日志的事件被发起时，logback 会将这个事件发送给 appender-->
    <!--RollingFileAppender，滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件-->
    <appender name="performanceAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 记录的日志文件的路径及文件名 -->
        <file>logs/performanceLog.log</file>
        <!-- 日志记录器的滚动策略，按日期，按大小记录 -->
        <!--TimeBasedRollingPolicy 实现的是基于时间的分包策略，分包间隔是根据fileNamePattern中指定的事件最小单位-->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 归档的日志文件的路径，例如今天是2018-12-19日志，当前写的日志文件路径为file节点指定，可以将此文件与file指定文件路径设置为不同路径，从而将当前日志文件或归档日志文件置不同的目录。
                        而2018-12-01的日志文件在由fileNamePattern指定。%d{yyyy-MM-dd}指定日期格式，%i指定索引 -->
            <fileNamePattern>logs//performanceLog-%d{yyyyMMdd}.%i.log</fileNamePattern>
            <!-- 除按日志记录之外，还配置了日志文件不能超过50Mb，若超过50Mb，日志文件会以索引0开始，  命名日志文件，例如app_test-20181219.0.log -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <!--最大50mb-->
                <maxFileSize>50MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
        <!-- 追加方式记录日志 -->
        <append>true</append>
        <!-- 日志文件的格式和编码 -->
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>%d{yyyy/MM/dd' 'HH:mm:ss.SSS} %X{req.requestId}[line:%L %msg] %n</pattern>
            <charset>utf-8</charset>
        </encoder>
        <!--此日志文件只记录info级别的-->
        <!--filter是日志过滤器-->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <!--过滤级别-->
            <level>info</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!--使用LoggerFactory.getLogger("performanceLogger") 使用这个logger-->
    <logger name="performanceLogger" additivity="false">
        <!--使用哪一个Appender-->
        <appender-ref ref="performanceAppender" />
    </logger>

    <!--控制台打印资源加载信息-->
    <root level="info">
        <appender-ref ref="STDOUT"/>
        <appender-ref ref="FILE"/>
    </root>

    <logger name="club.wujingjian.base.web" level="trace"/>

</configuration>